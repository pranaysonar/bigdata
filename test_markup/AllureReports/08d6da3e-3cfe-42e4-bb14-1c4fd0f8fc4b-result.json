{"name": "test_addemo_orange_hrm", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\HP\\Pictures\\background.jpg\n  (Session info: chrome=128.0.6613.120)\nStacktrace:\n\tGetHandleVerifier [0x00007FF645EB9412+29090]\n\t(No symbol) [0x00007FF645E2E239]\n\t(No symbol) [0x00007FF645CEB1DA]\n\t(No symbol) [0x00007FF645D371B0]\n\t(No symbol) [0x00007FF645D666EA]\n\t(No symbol) [0x00007FF645D326C6]\n\t(No symbol) [0x00007FF645D66900]\n\t(No symbol) [0x00007FF645D865A2]\n\t(No symbol) [0x00007FF645D66493]\n\t(No symbol) [0x00007FF645D309D1]\n\t(No symbol) [0x00007FF645D31B31]\n\tGetHandleVerifier [0x00007FF6461D871D+3302573]\n\tGetHandleVerifier [0x00007FF646224243+3612627]\n\tGetHandleVerifier [0x00007FF64621A417+3572135]\n\tGetHandleVerifier [0x00007FF645F75EB6+801862]\n\t(No symbol) [0x00007FF645E3945F]\n\t(No symbol) [0x00007FF645E34FB4]\n\t(No symbol) [0x00007FF645E35140]\n\t(No symbol) [0x00007FF645E2461F]\n\tBaseThreadInitThunk [0x00007FFF94227BD4+20]\n\tRtlUserThreadStart [0x00007FFF95EACED1+33]", "trace": "self = <test_file3.Test003 object at 0x00000216200C2720>\n\n    @pytest.mark.web\n    @pytest.mark.group1\n    def test_addemo_orange_hrm(self):\n        #driver = webdriver.Chrome(options=chrome_options)\n        driver = webdriver.Chrome()\n        driver.maximize_window()\n        driver.implicitly_wait(10)\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        driver.find_element(By.XPATH, \"//input[@placeholder='Username']\").send_keys(\"Admin\")\n        driver.find_element(By.XPATH, \"//input[@placeholder='Password']\").send_keys(\"admin123\")\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Login']\").click()\n        driver.find_element(By.XPATH, \"/html/body/div/div[1]/div[1]/aside/nav/div[2]/ul/li[2]/a\").click()\n        driver.find_element(By.XPATH, \"//i[@class='oxd-icon bi-plus oxd-button-icon']\").click()\n        driver.find_element(By.XPATH, \"//input[@placeholder='First Name']\").send_keys(\"Rahul\")\n        driver.find_element(By.XPATH, \"//input[@placeholder='Middle Name']\").send_keys(\"H\")\n        driver.find_element(By.XPATH, \"//input[@placeholder='Last Name']\").send_keys(\"Patil\")\n        time.sleep(3)\n        file = r\"C:\\Users\\HP\\Pictures\\background.jpg\"\n>       driver.find_element(By.XPATH, \"//input[@type='file']\").send_keys(r\"C:\\Users\\HP\\Pictures\\background.jpg\")\n\ntest_file3.py:67: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002162012DC40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...07FF645E2461F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF94227BD4+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF95EACED1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\HP\\Pictures\\background.jpg\nE         (Session info: chrome=128.0.6613.120)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF645EB9412+29090]\nE       \t(No symbol) [0x00007FF645E2E239]\nE       \t(No symbol) [0x00007FF645CEB1DA]\nE       \t(No symbol) [0x00007FF645D371B0]\nE       \t(No symbol) [0x00007FF645D666EA]\nE       \t(No symbol) [0x00007FF645D326C6]\nE       \t(No symbol) [0x00007FF645D66900]\nE       \t(No symbol) [0x00007FF645D865A2]\nE       \t(No symbol) [0x00007FF645D66493]\nE       \t(No symbol) [0x00007FF645D309D1]\nE       \t(No symbol) [0x00007FF645D31B31]\nE       \tGetHandleVerifier [0x00007FF6461D871D+3302573]\nE       \tGetHandleVerifier [0x00007FF646224243+3612627]\nE       \tGetHandleVerifier [0x00007FF64621A417+3572135]\nE       \tGetHandleVerifier [0x00007FF645F75EB6+801862]\nE       \t(No symbol) [0x00007FF645E3945F]\nE       \t(No symbol) [0x00007FF645E34FB4]\nE       \t(No symbol) [0x00007FF645E35140]\nE       \t(No symbol) [0x00007FF645E2461F]\nE       \tBaseThreadInitThunk [0x00007FFF94227BD4+20]\nE       \tRtlUserThreadStart [0x00007FFF95EACED1+33]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: InvalidArgumentException"}, "start": 1726145409018, "stop": 1726145492913, "uuid": "aeb63d62-ccc0-4b1d-8270-c7663054fcb6", "historyId": "525761fc40964e8fb5bb3841101f1743", "testCaseId": "525761fc40964e8fb5bb3841101f1743", "fullName": "test_file3.Test003#test_addemo_orange_hrm", "labels": [{"name": "tag", "value": "group1"}, {"name": "tag", "value": "web"}, {"name": "suite", "value": "test_file3"}, {"name": "subSuite", "value": "Test003"}, {"name": "host", "value": "DESKTOP-PD08TMV"}, {"name": "thread", "value": "11772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_file3"}]}