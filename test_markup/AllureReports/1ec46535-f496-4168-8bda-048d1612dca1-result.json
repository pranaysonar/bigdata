{"name": "test_OrangeHrm_Login_011", "status": "failed", "statusDetails": {"message": "AssertionError: assert False", "trace": "self = <test_file5.TestClass5 object at 0x00000216200C2ED0>\n\n    @pytest.mark.web\n    @pytest.mark.group2\n    def test_OrangeHrm_Login_011(self):\n        #driver = webdriver.Chrome(options=chrome_options)\n        driver = webdriver.Chrome()\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        time.sleep(4)\n        driver.find_element(By.XPATH, \"//input[@placeholder='Username']\").send_keys(\"Admin\")\n        driver.find_element(By.XPATH, \"//input[@placeholder='Password']\").send_keys(\"admin123\")\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Login']\").click()\n    \n        try:\n            time.sleep(2)\n>           driver.find_element(By.XPATH, \"//p[@class='oxd-userdropdown-name']\")\n\ntest_file5.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:748: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002162012FFE0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such element\",\"message\":\"no such element: Unable to locate element: {\\...07FF645E2461F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF94227BD4+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFF95EACED1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//p[@class='oxd-userdropdown-name']\"}\nE         (Session info: chrome=128.0.6613.120); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF645EB9412+29090]\nE       \t(No symbol) [0x00007FF645E2E239]\nE       \t(No symbol) [0x00007FF645CEB1DA]\nE       \t(No symbol) [0x00007FF645D3EFE7]\nE       \t(No symbol) [0x00007FF645D3F23C]\nE       \t(No symbol) [0x00007FF645D897C7]\nE       \t(No symbol) [0x00007FF645D6672F]\nE       \t(No symbol) [0x00007FF645D865A2]\nE       \t(No symbol) [0x00007FF645D66493]\nE       \t(No symbol) [0x00007FF645D309D1]\nE       \t(No symbol) [0x00007FF645D31B31]\nE       \tGetHandleVerifier [0x00007FF6461D871D+3302573]\nE       \tGetHandleVerifier [0x00007FF646224243+3612627]\nE       \tGetHandleVerifier [0x00007FF64621A417+3572135]\nE       \tGetHandleVerifier [0x00007FF645F75EB6+801862]\nE       \t(No symbol) [0x00007FF645E3945F]\nE       \t(No symbol) [0x00007FF645E34FB4]\nE       \t(No symbol) [0x00007FF645E35140]\nE       \t(No symbol) [0x00007FF645E2461F]\nE       \tBaseThreadInitThunk [0x00007FFF94227BD4+20]\nE       \tRtlUserThreadStart [0x00007FFF95EACED1+33]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchElementException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_file5.TestClass5 object at 0x00000216200C2ED0>\n\n    @pytest.mark.web\n    @pytest.mark.group2\n    def test_OrangeHrm_Login_011(self):\n        #driver = webdriver.Chrome(options=chrome_options)\n        driver = webdriver.Chrome()\n        driver.get(\"https://opensource-demo.orangehrmlive.com/web/index.php/auth/login\")\n        time.sleep(4)\n        driver.find_element(By.XPATH, \"//input[@placeholder='Username']\").send_keys(\"Admin\")\n        driver.find_element(By.XPATH, \"//input[@placeholder='Password']\").send_keys(\"admin123\")\n        driver.find_element(By.XPATH, \"//button[normalize-space()='Login']\").click()\n    \n        try:\n            time.sleep(2)\n            driver.find_element(By.XPATH, \"//p[@class='oxd-userdropdown-name']\")\n            time.sleep(4)\n            driver.find_element(By.XPATH, \"//p[@class='oxd-userdropdown-name']\").click()\n            driver.find_element(By.XPATH, \"//a[normalize-space()='Logout']\").click()\n            print(\"User login test case is passed\")\n            assert True\n        except:\n            print(\"User login test case is failed\")\n>           assert False\nE           assert False\n\ntest_file5.py:35: AssertionError"}, "attachments": [{"name": "stdout", "source": "738eeec4-ce62-4218-bc65-9ae263162721-attachment.txt", "type": "text/plain"}], "start": 1726145493101, "stop": 1726145545970, "uuid": "568971d8-5e8c-4f43-ac39-f9acb49012f3", "historyId": "897524cf898b1a9f50448bd82d8b3e41", "testCaseId": "897524cf898b1a9f50448bd82d8b3e41", "fullName": "test_file5.TestClass5#test_OrangeHrm_Login_011", "labels": [{"name": "tag", "value": "group2"}, {"name": "tag", "value": "web"}, {"name": "suite", "value": "test_file5"}, {"name": "subSuite", "value": "TestClass5"}, {"name": "host", "value": "DESKTOP-PD08TMV"}, {"name": "thread", "value": "11772-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_file5"}]}